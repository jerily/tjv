# Copyright Jerily LTD. All Rights Reserved.
# SPDX-FileCopyrightText: 2024 Neofytos Dimitriou (neo@jerily.cy)
# SPDX-License-Identifier: MIT.

package require tcltest
namespace import -force ::tcltest::test

package require tjv

source [file join [file dirname [info script]] common.tcl]

test tjvOutcome-1.1.1 {Test a single value, simple key, no outcome variable} -body {
    tjv::validate -type integer -outkey foo 1
} -result {foo 1}

test tjvOutcome-1.1.2 {Test a single value, simple key, with outcome variable} -body {
    unset -nocomplain result
    lappend result [tjv::validate -type integer -outkey foo 1 outcome]
    lappend result $outcome
} -cleanup {
    unset -nocomplain result outcome
} -result {1 {foo 1}}

test tjvOutcome-1.2.1 {Test a single value, complex key, no outcome variable} -body {
    tjv::validate -type integer -outkey "foo bar baz" 1
} -result {foo {bar {baz 1}}}

test tjvOutcome-1.2.2 {Test a single value, complex key, with outcome variable} -body {
    unset -nocomplain result
    lappend result [tjv::validate -type integer -outkey "foo bar baz" 1 outcome]
    lappend result $outcome
} -cleanup {
    unset -nocomplain result outcome
} -result {1 {foo {bar {baz 1}}}}

test tjvOutcome-2.1 {Test multiple values, tcl only, no outcome variable} -body {
    tjv::validate -type object -properties {
        {foo -type object -properties {
            { bar1 -type integer -outkey "val1" }
            { bar2 -type boolean -outkey "val2" }
        }}
        {baz -type string -outkey "sub val test"}
    } {
        foo {
            bar1 123
            bar2 yes
        }
        baz valbaz
    }
} -result {val1 123 val2 1 sub {val {test valbaz}}}

test tjvOutcome-2.1 {Test multiple values, tcl only, with outcome variable} -body {
    unset -nocomplain result
    lappend result [tjv::validate -type object -properties {
        {foo -type object -properties {
            { bar1 -type integer -outkey "val1" }
            { bar2 -type boolean -outkey "val2" }
        }}
        {baz -type string -outkey "sub val test"}
    } {
        foo {
            bar1 123
            bar2 yes
        }
        baz valbaz
    } outcome]
    lappend result $outcome
} -cleanup {
    unset -nocomplain result outcome
} -result {1 {val1 123 val2 1 sub {val {test valbaz}}}}

test tjvOutcome-3.1 {Test multiple values, with json, no outcome variable} -body {
    tjv::validate -type object -properties {
        {foo -type json -properties {
            { bar1 -type integer -outkey "val1" }
            { bar2 -type boolean -outkey "val2" }
        }}
        {baz -type string -outkey "sub val test"}
    } {
        foo {{
            "bar1": 123,
            "bar2": true
        }}
        baz valbaz
    }
} -result {val1 123 val2 1 sub {val {test valbaz}}}

test tjvOutcome-3.2 {Test multiple values, with json, with outcome variable} -body {
    unset -nocomplain result
    lappend result [tjv::validate -type object -properties {
        {foo -type json -properties {
            { bar1 -type integer -outkey "val1" }
            { bar2 -type boolean -outkey "val2" }
            { bar3 -type string -outkey "val3" }
        }}
        {baz -type string -outkey "sub val test"}
    } {
        foo {{
            "bar1": 123,
            "bar2": true,
            "bar3": "teststring with spaces"
        }}
        baz valbaz
    } outcome]
    lappend result $outcome
} -cleanup {
    unset -nocomplain result outcome
} -result {1 {val1 123 val2 1 val3 {teststring with spaces} sub {val {test valbaz}}}}

test tjvOutcome-4.1.1 {Test array outcome when children without outkey, tcl} -body {
    tjv::validate -type object -properties {
        {foo -type array -outkey outkey -items {
            -type object -properties {
                { f1 -type string -required }
                { f2 -type integer -required }
            }
        }}
    } {
        foo {
            { f1 val1 f2 1 }
            { f1 val2 f2 2 }
            { f1 val3 f2 3 }
        }
    }
} -result {outkey {}}

test tjvOutcome-4.1.2 {Test array outcome when children without outkey, json} -body {
    tjv::validate -type json -properties {
        {foo -type array -outkey outkey -items {
            -type object -properties {
                { f1 -type string -required }
                { f2 -type integer -required }
            }
        }}
    } {{
        "foo": [
            { "f1": "val1", "f2": 1 },
            { "f1": "val2", "f2": 2 },
            { "f1": "val3", "f2": 3 }
        ]
    }}
} -result {outkey {}}

test tjvOutcome-4.2.1 {Test array without outcome when children with outkey, tcl} -body {
    tjv::validate -type object -properties {
        {foo -type array -items {
            -type object -properties {
                { f1 -type string -required -outkey sfield }
                { f2 -type integer -required -outkey ifield }
            }
        }}
    } {
        foo {
            { f1 val1 f2 1 }
            { f1 val2 f2 2 }
            { f1 val3 f2 3 }
        }
    }
} -result {}

test tjvOutcome-4.2.2 {Test array without outcome when children with outkey, json} -body {
    tjv::validate -type json -properties {
        {foo -type array -items {
            -type object -properties {
                { f1 -type string -required -outkey sfield }
                { f2 -type integer -required -outkey ifield }
            }
        }}
    } {{
        "foo": [
            { "f1": "val1", "f2": 1 },
            { "f1": "val2", "f2": 2 },
            { "f1": "val3", "f2": 3 }
        ]
    }}
} -result {}

test tjvOutcome-4.3.1 {Test array outcome when children with outkey, tcl} -body {
    tjv::validate -type object -properties {
        {foo -type array -outkey outkey -items {
            -type object -properties {
                { f1 -type string -required -outkey sfield }
                { f2 -type integer -required -outkey ifield }
            }
        }}
    } {
        foo {
            { f1 val1 f2 1 }
            { f1 val2 f2 2 }
            { f1 val3 f2 3 }
        }
    }
} -result {outkey {{sfield val1 ifield 1} {sfield val2 ifield 2} {sfield val3 ifield 3}}}

test tjvOutcome-4.3.2 {Test array outcome when children with outkey, json} -body {
    tjv::validate -type json -properties {
        {foo -type array -outkey outkey -items {
            -type object -properties {
                { f1 -type string -required -outkey sfield }
                { f2 -type integer -required -outkey ifield }
            }
        }}
    } {{
        "foo": [
            { "f1": "val1", "f2": 1 },
            { "f1": "val2", "f2": 2 },
            { "f1": "val3", "f2": 3 }
        ]
    }}
} -result {outkey {{sfield val1 ifield 1} {sfield val2 ifield 2} {sfield val3 ifield 3}}}
