# Copyright Jerily LTD. All Rights Reserved.
# SPDX-FileCopyrightText: 2024 Neofytos Dimitriou (neo@jerily.cy)
# SPDX-License-Identifier: MIT.

package require tcltest
namespace import -force ::tcltest::test

package require tjv

source [file join [file dirname [info script]] common.tcl]

test tjvValidateJsonInteger-1.1 {Test without parameters, empty value} -body {
    tjv::validate -type json -properties {{ foo -type integer }} {{ "foo": "" }}
} -returnCodes error -result {Error while validating data: .foo should be integer}

test tjvValidateJsonInteger-1.2 {Test without parameters, wrong value} -body {
    tjv::validate -type json -properties {{ foo -type integer }} {{ "foo": false }}
} -returnCodes error -result {Error while validating data: .foo should be integer}

test tjvValidateJsonInteger-1.3.1 {Test without parameters, double value as integer} -body {
    tjv::validate -type json -properties {{ foo -type integer }} {{ "foo": 1.0 }}
} -result {}

test tjvValidateJsonInteger-1.3.2 {Test without parameters, wrong double value} -body {
    tjv::validate -type json -properties {{ foo -type integer }} {{ "foo": 1.1 }}
} -returnCodes error -result {Error while validating data: .foo should be integer}

test tjvValidateJsonInteger-1.4 {Test without parameters, null value} -body {
    tjv::validate -type json -properties {{ foo -type integer }} {{ "foo": null }}
} -returnCodes error -result {Error while validating data: .foo should be integer}

test tjvValidateJsonInteger-1.5 {Test null allowed, null value} -body {
    tjv::validate -type json -properties {{ foo -type integer -nullable  }} {{ "foo": null }}
} -result {}

test tjvValidateJsonInteger-1.3 {Test without parameters, correct value} -body {
    tjv::validate -type json -properties {{ foo -type integer }} {{ "foo": 123 }}
} -result {}

test tjvValidateJsonInteger-2.1 {Test with -minimum, wrong value} -body {
    tjv::validate -type json -properties {{ foo -type integer -minimum -10 }} {{ "foo": -123 }}
} -returnCodes error -result {Error while validating data: .foo value is less than the minimum -10}

test tjvValidateJsonInteger-2.2 {Test with -minimum, correct value} -body {
    tjv::validate -type json -properties {{ foo -type integer -minimum 10 }} {{ "foo": 1024 }}
} -result {}

test tjvValidateJsonInteger-3.1 {Test with -maximum, wrong value} -body {
    tjv::validate -type json -properties {{ foo -type integer -maximum 10 }} {{ "foo": 123 }}
} -returnCodes error -result {Error while validating data: .foo value is greater than the maximum 10}

test tjvValidateJsonInteger-3.2 {Test with -maximum, correct value} -body {
    tjv::validate -type json -properties {{ foo -type integer -maximum -20 }} {{ "foo": -500 }}
} -result {}

test tjvValidateJsonInteger-4.1 {Test with -minimum and -maximum, wrong value} -body {
    tjv::validate -type json -properties {{ foo -type integer -minimum 0 -maximum 100 }} {{ "foo": -600 }}
} -returnCodes error -result {Error while validating data: .foo value is less than the minimum 0}

test tjvValidateJsonInteger-4.2 {Test with -minimum and -maximum, correct value} -body {
    tjv::validate -type json -properties {{ foo -type integer -minimum -10 -maximum 10000000 }} {{ "foo": 0 }}
} -result {}
